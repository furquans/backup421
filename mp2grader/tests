let rubric_version = "1.1"
(* Added some 0 pt tests for polymorphism checks *)
let rubric_title = "CS421 Fall 2013 MP2"
(**************************************************************************
 * You can add new test cases by adding new elements to the following lists
 * Format is:
 * TEST<X>ARG(<weight>, <function_name>, <arg1>, <arg2>, ..., <argX>)
 *
 * <X> is the number of argument that the function being tested takes.
 **************************************************************************)

(* This list is for regular problems *)
let rubric =
[
    TEST2ARG(1, dist, (0.0, 0.0), (3.0, 4.0));
    TEST2ARG(1, dist, (1.0, 1.0), (3.0, 4.0));
    TEST2ARG(1, dist, (-1.0, -2.0), (3.0, 4.0));

    TEST1ARG(1, fibo_num, 4);
    TEST1ARG(1, fibo_num, 0);
    TEST1ARG(1, fibo_num, 1);
    TEST1ARG(1, fibo_num, (-4));

    TEST1ARG(1, fibo_sum, 5);
    TEST1ARG(1, fibo_sum, 0);
    TEST1ARG(1, fibo_sum, 1);
    TEST1ARG(1, fibo_sum, (-4));

    TEST1ARG(1, reverse_triple_to_list, (1,2,3));

    TEST1ARG(1, sum, [1;2;3]);
    TEST1ARG(1, sum, []);
    TEST1ARG(1, sum, [-1;1]);
    TEST1ARG(1, sum, [-1;-2;-3]);

    TEST2ARG(1, min, [1;2;3], 0);
    TEST2ARG(1, min, [], "Hi");
    TEST2ARG(1, min, ["Hi";"Hello";"What"], "Hi");

    TEST1ARG(1, is_sorted_ascend, [1;2;3]);

    TEST1ARG(1, is_sorted_ascend, [()]);

    TEST1ARG(1, is_sorted_ascend, ["Hi";"Hello";"What"]);
    TEST1ARG(1, is_sorted_ascend, ["Hello";"Hi";"What"]);
    TEST1ARG(1, is_sorted_ascend, [1;4;3]);
    TEST1ARG(1, is_sorted_ascend, [1;3;2]);
    
    TEST2ARG(1, zip, [1;2], [3;4]);

    TEST2ARG(1, zip, [()], ["h"]);
    TEST2ARG(1, zip, [1;2;5;6], [3;4]);
    TEST2ARG(1, zip, [1;2], [3;4;5;6]);
    TEST2ARG(1, zip, [1;2], ["hi";"hello";"what"]);

    TEST1ARG(1, unzip, [(1,3);(2,4)]);

    TEST1ARG(1, unzip, [((),"h")]);
    TEST1ARG(1, unzip, [(1,"hi");(2,"hello")]);

    TEST1ARG(1, add_odd_pos, [1;2;3;4;5]);
    TEST1ARG(1, add_odd_pos, []);
    TEST1ARG(1, add_odd_pos, [1]);
    TEST1ARG(1, add_odd_pos, [-1]);

    TEST1ARG(1, sum, [3;4;1]);

    TEST2ARG(1, insert, 2, [1;3]);

    TEST2ARG(1, insert, 2, []);
    TEST2ARG(1, insert, 2, [1;2;3]);
    TEST2ARG(1, insert, (-1), [1;2]);
    TEST2ARG(1, insert, 4, [1;2]);    
    TEST2ARG(0, insert, (), []);
]
(* Note: the last entry should not be followed by a semicolon. *)

let extra_rubric = 
[
	TEST1ARG(1, primes, 2);	
	TEST1ARG(1, primes, 10);
	TEST1ARG(1, primes, 1);
	TEST1ARG(1, primes, 0);
	TEST1ARG(1, primes, (-1)) 
]
